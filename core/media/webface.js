(function (win, doc, $){

	$.fn.extend({
		sortElements: (function (){
			/* author of sortElements fn: http://james.padolsey.com/ */
			var sort = [].sort;
			return function (comparator, getSortable){
				getSortable = getSortable || function (){
					return this;
				};
				var placements = this.map(function (){
					var sortElement = getSortable.call(this),
						parentNode = sortElement.parentNode,
						nextSibling = parentNode.insertBefore(document.createTextNode(''), sortElement.nextSibling);
						return function (){
							if (parentNode === this){
								throw new Error('You can\'t sort elements if any one is a descendant of another.');
							}
							parentNode.insertBefore(this, nextSibling);
							parentNode.removeChild(nextSibling);
						};
					});
				return sort.call(this, comparator).each(function (i){
					placements[i].call(getSortable.call(this));
				});
			};
		})(),

		tr: function (text){
			this.text(text).removeClass();
			return this;
		},

		downlinkAnimate: function (){
			var link = this,
				pos = link.offset(),
				img = $('<img class="download" />'),
				bg = link.css('background-image').match(/url\(["']?(.*?)['"]?\)/);
			bg && link.attr('disabled', true).attr('title', 'Already downloaded') && img.attr('src', bg[1]).css({
				left: pos.left,
				top: pos.top,
				width: 16,
				height: 16
			}).appendTo(doc.body).animate({
				width: 56,
				height: 56,
				left: '-=20',
				top: '-=20',
				opacity: 0
			}, 350, function (){
				img.remove();
			});
			return link.attr('href');
		}
	});

	function App(config){
		config = $.extend({
			pageload: '#pageload',
			table: '#container',
			paginator: '#paginator',
			dbcounter: '#dbcount',
			dialog: '#dialog',
			stats: '#stats',
			filter: '#filter',
			navlinks: 'a.nav',
			statsTimeUpdate: 600000,
			sortByDate: false
		}, config);

		this.blocknav = function (block){
			$(config.navlinks).attr('disabled', !!(block || block === []._));
		};

		this.loading = function (hide){
			hide = hide === []._ ? true : false;
			app.blocknav(hide);
			$(config.table + ',' + config.paginator)[hide ? 'hide' : 'show']();
			$(config.pageload)[!hide ? 'hide' : 'show']();
		};

		this.hashNav = function (){
			var nav = function (){
					var nav = {};
					$.each(win.location.hash.replace(/#/, '').split('&'), function (i, v){
						(v = v.split('=')) && v.length == 2 && /\w+/.test(v[0]) && (nav[v[0]] = decodeURIComponent(v[1]));
					});
					return nav;
				};
			return {
				set: function (obj, extend){
					win.location.replace('#' + $.map(extend ? $.extend(nav(), obj) : obj, function (v, k){
						if (/\w+/.test(k)){
							return k + '=' + encodeURIComponent(v);
						}
					}).join('&'));
					return obj;
				},
				get: function (val, defaul){
					defaul === []._ && (defaul = null);
					return nav()[val] || defaul;
				},
				getInt: function (val, _v){
					(_v = +nav()[val] || 0) && _v < 0 && (_v = 0);
					return _v;
				},
				getFloat: function (val, defaul){
					defaul === []._ && (defaul = null);
					return parseFloat(nav()[val]) || defaul;
				}
			};
		};

		this.stats = function (){
			var dest = $(config.stats),
				timer = false;
			dest.on('refresh', function (){
				$.getJSON('/stats', function (data){
					data.status && dest.tr(data.stats).fadeOut(300).fadeIn(300) && (allowDownload = data.stats != '15/15');
				}).fail(function (e){
					timer && clearTimeout(timer);
					dialogObj.trigger('text', ['Error getting status. ' + (e.statusText || ''), 'error']);
				});
			});
			(function refresh(){
				dest.trigger('refresh');
				timer = setTimeout(refresh, config.statsTimeUpdate);
			})();
			return dest;
		};

		this.dialog = function (){
			var dest = $(config.dialog),
				timer = false,
				clear = function (){
					timer && clearTimeout(timer);
					$('.controll', dest).hide();
					$('p.text', dest).text('');
					$('input', dest).val('').off();
					dest.removeClass();
					return dest;
				},
				hide = function (){
					dest.animate({
						top: '-=' + (dest.outerHeight() + 100 + $(win).scrollTop())
					}, 300, function (){
						clear().hide();
					});
				},
				show = function (){
					clear().show().animate({
						top: 0
					}, 300);
				};

			dest.on('text byhash byname', function (event, msgcall, style, cnt){
				show();
				cnt = $('.controll.' + event.type, dest).show();
				style !== []._ && dest.addClass(style);
				if (msgcall){
					typeof msgcall == 'string' ? cnt.text(msgcall) && (timer = setTimeout(hide, 6000)) : $('input', cnt).focus().on('keypress', function (event, val){
						val = $(this).val();
						if (event.which == 13 && val){
							event.preventDefault();
							msgcall(val);
							hide();
						}
					});
				}
			});
			$(doc).on('keyup', function (event){
				event.which == 27 && dest.is(':visible') && hide() && event.preventDefault();
			});
			return dest;
		};

		this.paginator = function (onclick){
			var dest = $(config.paginator);
			dest.on('page', function (event, cur, max){
				max === []._ && (max = config.maxpages);
				if (!max || (!cur && !max) || cur > max){
					return dest.html('');
				}
				curView.maxpages = max;
				var pages = [],
					range = function (start, stop, active){
						return $.each(Array(stop - start + 1), function (i, v){
							v = i + start;
							pages.push('<a href="' + v + (active == v ? '" class="active' : '') + '">' + v + '</a>');
						});
					};
				pages.push('<a href="'+ (cur ? cur - 1 : cur + '" disabled="disabled') +'" title="Ctrl + &larr;">&larr; Prev</a>');
				cur < 10 && range(0, 10, cur) && pages.push('...') && range(max - 1, max);
				cur >= 10 && cur <= max - 10 && range(0, 1) && pages.push('...') && range(cur - 5, cur + 5, cur) && pages.push('...') && range(max - 1, max);
				cur > max - 10 && range(0, 1) && pages.push('...') && range(max - 10, max, cur);
				pages.push('<a href="'+ (cur != max ? cur + 1 : max + '" disabled="disabled') +'" title="Ctrl + &rarr;">Next &rarr;</a>');
				dest.html('<li>' + pages.join('</li><li>') + '</li>');
			});
			onclick && dest.on('click', 'a', function (event){
				event.preventDefault();
				onclick(+$(this).attr('href'));
			});
			return dest;
		};

		this.table = function (){
			var dest = $(config.table),
				tbody = $('tbody', dest),
				trap = /(probably\s+)?a\s+variant\s+of\s?/,
				insertItem = function (hashes){
					/*
						hashes[0] - md5, hashes[1] - sha1, hashes[2] - sha256
						OR
						hashes[0] - md5, hashes[1] - percent of complete
					*/
					$('<tr class="load" id="' + hashes[0] + '"><td>' + (hashes.length == 3 ? '<a href="' + hashes[0] + '" class="nav icon download" title="Download sample"></a>' : (hashes[2] = hashes[0]) && '<div class="progress"><b>' + hashes[1] + '%</b><i style="width:' + hashes[1] + '%;"></i></div>') + '<a target="_blank" href="https://www.virustotal.com/file/' + hashes[2] + '/analysis/" class="icon view" title="View details on www.virustotal.com"></a><span>' + hashes[0] + '</span></td><td></td><td></td><td></td></tr>').appendTo(tbody);
					return hashes[0];
				},
				setScans = function (scans, avs, positives){
					var ret = $.map(avs, function (av){
							var scan = scans[av];
							if (scan && scan.detected){
								return '<span title="' + av + '">' + scan.result.replace(trap, '') + '</span>';
							}
						});
					return ret.length < avs.length && positives ? ret.concat($.map(scans, function (scan, av){
						if (scan.detected){
							return '<span title="' + av + '">' + scan.result.replace(trap, '') + '</span>';
						}
					}).splice(0, avs.length - ret.length)) : ret;
				},
				update = function (data){
					var tr = data.resource ? $('#' + data.resource) : false,
						scans = [],
						scans_td;
					if (tr){
						scans_td = $('td:eq(3)', tr);
						if (data.md5){
							data.size && $('td:eq(0)', tr).attr('title', 'Size: ' + data.size + ' b');
							data.scan_date && $('td:eq(1)', tr).text(data.scan_date.split(' ')[0]).attr('title', data.scan_date);
							$('td:eq(2)', tr).text(data.positives + '/' + data.total);
							data.scans && (scans = setScans(data.scans, config.avs, data.positives));
							scans_td.html(scans.length ? scans.join(', ') : '<em>Undetected</em>');
						} else if (data.verbose_msg){
							scans_td.html('<em>' + data.verbose_msg + '</em>');
						}
						tr.removeClass();
					}
				},
				resolve = function (data){
					$.isArray(data) && $.each(data, function (i, item){
						update(item);
					});
					data.resource && update(data);
				},
				loadInfo = function (data){
					var infos = $.isArray(data) && data.length ? $.map(data, function (item){
							return insertItem(item);
						}) : [],
						requests = [];
					while (infos.length){
						requests.push($.when($.getJSON('/md5infos/' + infos.splice(0, 4).join(','), resolve)));
					}
					$.when.apply($, requests).always(function (){
						config.sortByDate && $('tr', tbody).sortElements(function(a, b){
							return $('td:eq(1)', a).text() > $('td:eq(1)', b).text() ? -1 : 1;
						});
					}).fail(function (e){
						dialogObj.trigger('text', ['Error loading information about samples. ' + (e.statusText || ''), 'error']);
					});
				};

			!config.sortByDate && $('thead th:has(i)', dest).attr('title', 'Click to sort').addClass('hover').on('click', function (){
				$('tr', tbody).sortElements(function(a, b){
					return $('td:eq(1)', a).text() > $('td:eq(1)', b).text() ? -1 : 1;
				});
			});

			dest.on('samples', function (event, page){
				tbody.empty();
				app.loading();
				$.getJSON('/samples/page' + page, function (data){
					loadInfo(data);
					app.loading(false);
					paginatorObj.trigger('page', [page, config.maxpages]);
					hashNavObj.set({
						page: page,
						view: event.type
					});
				}).fail(function (e){
					dialogObj.trigger('text', ['Error loading list of samples', 'error']);
				});
			});

			dest.on('downloads', function (event, page){
				app.loading();
				$.getJSON('/downloads/page' + page, function (data){
					if (data.count){
						tbody.empty();
						loadInfo(data.samples);
						paginatorObj.trigger('page', [page, data.maxpages]);
						hashNavObj.set({
							page: page,
							view: event.type
						});
						filterObj.trigger('show', ['Samples which have already been downloaded', function (){
							dest.trigger('samples', [0]);
						}]);
					} else {
						dialogObj.trigger('text', ['List of samples which have already been downloaded is empty']);
					}
				}).fail(function (e){
					dialogObj.trigger('text', ['Error loading list of downloaded samples', 'error']);
				}).always(function (){
					app.loading(false);
				});
			});

			dest.on('byhash byname', function (event, text){
				app.loading();
				filterObj.trigger('hide');
				typeof text != 'string' && (text = hashNavObj.get('q', ''));
				$.post('/search', {
					type: event.type,
					q: text
				}, function (data){
					if ($.isArray(data) && data.length){
						tbody.empty();
						loadInfo(data);
						paginatorObj.trigger('page', [0, 0]);
						hashNavObj.set({
							view: event.type,
							q: text
						});
						text.length > 70 && (text = text.substr(0, 70) + '...');
						filterObj.trigger('show', [text, function (){
							dest.trigger('samples', [0]);
						}]);
					} else {
						dialogObj.trigger('text', ['Nothing found']);
					}
				}).fail(function (e){
					dialogObj.trigger('text', ['Error sending request (' + event.type + ')', 'error']);
				}).always(function (){
					app.loading(false);
				});
			});

			dest.trigger(curView.name, [hashNavObj.getInt('page')]);

			$(doc).on('keyup', function (e, _page){
				if (e.ctrlKey && dest.is(':visible') && !paginatorObj.is(':empty')){
					_page = hashNavObj.getInt('page');
					e.which == 37 && _page && dest.trigger(curView.name, [_page - 1]);
					e.which == 39 && _page < curView.maxpages && dest.trigger(curView.name, [_page + 1]);
				}
			});

			return dest;
		};

		this.navlinks = function (){
			$(doc.body).on('click', config.navlinks, function (event){
				event.preventDefault();
				var link = $(this),
					action = link.attr('href');
				if (!link.attr('disabled')){
					action == 'downloads' && tableObj.trigger(action, [0]);
					(action == 'byhash' || action == 'byname') && dialogObj.trigger(action, [function (text){
						tableObj.trigger(action, [text]);
					}]);
					/[a-f0-9]{32}/.test(action) && (allowDownload ? link.downlinkAnimate() && $.getJSON('/download/' + action, function (d){
						!d.exists && setTimeout(function (){
							statsObj.trigger('refresh');
						}, 1000);
						d.exists && dialogObj.trigger('text', ['Already downloaded', 'ok']);
					}) : dialogObj.trigger('text', ['Download limit is exceeded', 'error']));
				}
			});
		};

		this.filter = function (){
			var dest = $(config.filter),
				strong = $('strong', dest),
				onreset = false,
				hide = function (){
					dest.fadeOut(100, function (){
						strong.text('');
					}) && (onreset = false);
				};
			$('a', dest).on('click', function (event){
				event.preventDefault();
				dest.is(':visible') && (onreset && onreset(), hide());
			});
			dest.on('hide', hide);
			dest.on('show', function (event, text, onclick){
				onreset = onclick;
				strong.text(text);
				dest.fadeIn(300);
			});
			return dest;
		};

		var app = this,
			allowDownload = true,
			hashNavObj = this.hashNav(),
			filterObj = this.filter(),
			curView = {
				name: hashNavObj.get('view', 'samples'),
				maxpages: config.maxpages
			},
			dbcounterObj = $(config.dbcounter).tr(config.count),
			statsObj = this.stats(),
			tableObj = this.table(),
			paginatorObj = this.paginator(function (page){
				tableObj.trigger(curView.name, [page]);
			}),
			dialogObj = this.dialog(),
			navlinksObj = this.navlinks();

		return this;
	}

	$.ajaxSetup({
		cache: true,
		timeout: 20000, // 20 sec
		dataType: 'json'
	});

	$(function (){
		$.getJSON('/config').done(function (config){
			var app = new App(config);
		});
	});

})(window, document, jQuery);