# -*- coding: utf-8 -*-

import re, socket, os, sys
from core.MluSample import MluSample
if sys.version_info[0] == 3:
	from urllib.parse import unquote, quote, urlencode, parse_qs
	from http.server import HTTPServer, SimpleHTTPRequestHandler
	from socketserver import ThreadingMixIn
	import json
else:
	from urlparse import parse_qs
	from urllib import unquote, quote, urlencode
	from BaseHTTPServer import HTTPServer
	from SimpleHTTPServer import SimpleHTTPRequestHandler
	from SocketServer import ThreadingMixIn
	import simplejson as json

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
	'''Handle requests in a separate thread.'''

class WebHandler(SimpleHTTPRequestHandler):

	def do_GET(self):
		self.do_route()

	def do_POST(self):
		self.do_route()

	def isFile(self):
		isfile = False
		path = self.translate_path(unquote(self.path).replace('..', '.'))
		if os.path.isdir(path):
			for index in self.app.config['index']:
				index = os.path.join(path, index)
				if os.path.isfile(index):
					path = isfile = index
					break
		elif os.path.isfile(path):
			filename = os.path.basename(path)
			extp = filename.rfind('.')
			isfile = filename[extp:] not in self.app.config['denyfileexts']
		return path if isfile else False

	def parsePost(self):
		req = {}
		length = int(self.headers.getheader('Content-length', '0'))
		for k, v in parse_qs(self.rfile.read(length), keep_blank_values = 1).iteritems():
			if '[]' in k:
				k = k[:-2]
			else:
				v = v[0]
			req[k] = v
		return req

	def isAjax(self):
		return self.headers.has_key('X-Requested-With')

	def respfile(self, filename):
		mime = self.guess_type(filename)
		self.done(open(filename, 'r' if mime.find('text/') == 0 else 'rb'), {
			'Content-type': mime,
			'Content-length': int(os.path.getsize(filename)),
			'Last-Modified': self.date_time_string(os.path.getmtime(filename))
		})

	def done(self, content = None, headers = {}, code = 200, cache = False, maxage = 2592000):
		try:
			if code in range(400, 511):
				return self.send_error(code, content if content else self.responses[code][0])
			self.send_response(code)
			defheaders = {
				'Content-type': '%s; charset=utf-8' % 'application/json' if self.isAjax() else 'text/html',
				'Cache-Control': '%s, must-revalidate' % (('private, max-age=%d' % maxage) if cache and maxage else 'no-cache')
			}
			defheaders.update(headers)
			for k, v in defheaders.items():
				self.send_header(k, str(v))
			self.end_headers()
			if content:
				if isinstance(content, file):
					content.seek(0)
					content, _ = content.read(), content.close()
			else:
				content = ''
			if isinstance(content, list) or isinstance(content, dict):
				content = json.dumps(content)
			self.wfile.write(content)
		except (IOError, socket.error), e:
			if isinstance(content, file) and not content.closed:
				content.close()
			if self.app.debug:
				print 'Error on "done":', os.strerror(e.errno)

	# routes

	def do_route(self):
		if self.routes.has_key(self.command):
			for route in self.routes[self.command]:
				rdata = re.match(route[0], unquote(self.path))
				handler = 'handler_' + route[1]
				if rdata and hasattr(self, handler):
					return apply(getattr(self, handler), filter(lambda d: d != None, rdata.groups()))
		filename = self.isFile()
		return self.respfile(filename) if filename else self.done(code = 404)

	def finish(self):
		try:
			SimpleHTTPRequestHandler.finish(self)
		except (IOError, socket.error), e:
			if self.app.debug:
				print 'Error on "finish":', os.strerror(e.errno)

	def handle_one_request(self):
		try:
			SimpleHTTPRequestHandler.handle_one_request(self)
		except (IOError, socket.error), e:
			if self.app.debug:
				print 'Error on "handle_one_request":', os.strerror(e.errno)

	# GET handlers

	def handler_config(self):
		self.done({
			'avs': self.app.config['virustotal.com']['avs'],
			'itemsperpage': self.app.config['itemsperpage'],
			'count': self.app.dbcount,
			'maxpages': self.app.dbmaxpages
		})

	def handler_stats(self):
		content, code = MluSample(parseJSON = False).stats()
		self.done(content = content, code = code)

	def handler_samples(self, _ = None, page = 0):
		self.done(MluSample().readDB(int(page)), cache = True, maxage = 900)

	def handler_downloads(self, _ = None, page = 0):
		self.done(MluSample().downloads(int(page)))

	def handler_download(self, md5):
		self.done(MluSample(md5).download())

	def handler_getinfos(self, md5hashes):
		hashes = re.findall(r'([a-f0-9]{32})', md5hashes)
		if hashes:
			content, code = MluSample(hashes, False).info()
			return self.done(content = content, code = code, cache = True, maxage = 86400)
		self.done(code = 400)

	def handler_search(self):
		form = self.parsePost()
		if form.has_key('type') and form.has_key('q') and form['q']:
			if form['type'] == 'byhash':
				return self.done(MluSample(form['q'], False).searchInDB())
			if form['type'] == 'byname':
				content, code = MluSample().searchOnVT(form['q'])
				return self.done(content = content, code = code)
		self.done(code = 400)